# Load required libraries
library(rvest)
library(dplyr)

# Function to scrape data for a given link
scrape_data <- function(link, year) {  # Pass the year as an argument
  # Send a GET request to the link
  page <- read_html(link)
  
  # Extract questions
  questions <- page %>% html_nodes(xpath = "/html/body/main/div/div[3]/div/main/div[2]/table[1]/caption/div/span[1]") %>%
    html_text(trim = TRUE)
  
  num <- page %>% html_nodes(xpath = "/html/body/main/div/div[3]/div/main/div[2]/table") %>%
    length()
  
  # Initialize data frame to store results
  results <- data.frame(Precinct = character(0), Question = character(0), Response = character(0), Number_Votes = numeric(0), Election_Date = character(0), stringsAsFactors = FALSE)
  
  # Loop through questions tables
  num_tables <- num
  
  for (table_index in 1:num_tables) {
    # Construct XPath for the current question table
    table_xpath <- paste0("/html/body/main/div/div[3]/div/main/div[2]/table[", table_index, "]")
    
    # Extract questions for the current table
    current_questions <- page %>% html_nodes(xpath = paste0(table_xpath, "/caption/div/span[1]")) %>%
      html_text(trim = TRUE)
    
    
    # Extract precinct name
    precinct_name <- page %>% html_node(xpath = "/html/body/main/div/div[3]/div/main/div[2]/div[2]/table/caption/text()") %>%
      html_text(trim = TRUE)
    
    # If it's neither Yes nor No, scrape data for other candidates
    candidate_count <- page %>% html_nodes(xpath = paste0(table_xpath, "/tbody/tr")) %>%
      length()
    
    for (candidate_index in 1:candidate_count) {
      candidate_name <- page %>% html_node(xpath = paste0(table_xpath, "/tbody/tr[", candidate_index, "]/td[3]")) %>%
        html_text(trim = TRUE)
      
      # Skip the row if candidate_name is NA or write in
      if (is.na(candidate_name)  || candidate_name == "WRITE-IN" || candidate_name == "WRITE-IN**") {
        next
      }
      candidate_party <- page %>% html_node(xpath = paste0(table_xpath, "/tbody/tr[", candidate_index, "]/td[2]")) %>%
        html_text(trim = TRUE)
      
      if (candidate_party == "NP" || candidate_party == "N P")
      {
        candidate_party = "Nonpartisan"
      }
      candidate_votes_str <- page %>% html_node(xpath = paste0(table_xpath, "/tbody/tr[", candidate_index, "]/td[4]")) %>%
        html_text(trim = TRUE)
      
      # Remove commas and convert to numeric
      candidate_votes <- as.numeric(gsub(",", "", candidate_votes_str))
      
      # Format the Response field as "CandidateName (Party)"
      if (candidate_name=="NO" || candidate_name == "YES")
      {
        response <- candidate_name
      }
      else
      {
        response <- paste(candidate_name, " (", candidate_party, ")", sep = "")
      }
      
      # Append data for each candidate to the results data frame
      results <- rbind(results, data.frame(
        Precinct = precinct_name,
        Question = current_questions,
        Response = response,
        Number_Votes = candidate_votes,
        Election_Date = year,
        stringsAsFactors = FALSE))
    }
  }
  print(results)
  return(results)
}

# Initialize a list to store data for all links
all_data <- list()

# Define the base URL for Ramsey County
base_url <- "https://electionresults.sos.state.mn.us/Select/Precinct/Index?ErsElectionId="

# Define the election years and corresponding IDs for Ramsey County
election_years <- c("2021", "2019", "2017", "2015", "2013")
election_ids <- c(142, 125, 107, 88, 6)

# Initialize a list to store data for all years
all_data <- list()

# Loop through each election year and scrape data
for (i in seq_along(election_years)) {
  year <- election_years[i]
  election_id <- election_ids[i]
  
  # Construct the precinct selection URL for the current year and county
  precinct_selection_url <- paste0(base_url, election_id, "&Id=county&CountyId=62&show=Go")
  
  # Send a GET request to the precinct selection URL
  precinct_page <- read_html(precinct_selection_url)
  
  # Extract all precinct links from the dropdown list
  precinct_links <- precinct_page %>%
    html_nodes(xpath = "/html/body/main/div/div[2]/main/div[2]/form/div[2]/div/select/option") %>%
    html_attr("value")
  
  # Loop through each precinct link for the current year
  for (link in precinct_links) {
    # Create the complete URL for the precinct
    precinct_url <- paste0("https://electionresults.sos.state.mn.us/results/Index?ErsElectionId=", election_id, "&CountyId=62&DistrictId=&Scenario=Precincts&selectprecincts=", link, "&show=Show+Selected+Precincts")
    
    # Scrape data for the current precinct link for the current year
    data <- scrape_data(precinct_url, year = year)
    
    # Append the data to the list
    all_data[[paste0(year, "_Ramsey_", link)]] <- data
  }
}

# Combine all the data into a single data frame
final_data <- do.call(rbind, all_data)

# Save the final data as a single CSV file
write.csv(final_data, file = "combined_ramsey_data.csv", row.names = FALSE)  # Save combined data
